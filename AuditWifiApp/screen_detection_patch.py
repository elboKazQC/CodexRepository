#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Patch de correction pour la d√©tection d'√©cran portable
√Ä appliquer au fichier runner.py
"""

def apply_screen_detection_fix():
    """Applique la correction de d√©tection d'√©cran portable"""
    
    # Code de la m√©thode is_portable_screen() √† ajouter
    is_portable_screen_method = '''
    def is_portable_screen(self):
        """D√©termine si l'√©cran est un √©cran portable bas√© sur la taille physique et le DPI"""
        screen_width = self.master.winfo_screenwidth()
        screen_height = self.master.winfo_screenheight()
        
        try:
            # Calculer la taille physique de l'√©cran
            dpi = self.master.winfo_fpixels('1i')
            diagonal_pixels = (screen_width**2 + screen_height**2)**0.5
            diagonal_inches = diagonal_pixels / dpi
            
            # Crit√®res pour √©cran portable :
            # - √âcran physique <= 16.5 pouces (laptops 15-16")
            # - OU r√©solution classique faible
            # - OU DPI √©lev√© (√©crans haute densit√©, souvent portables)
            is_portable = (
                diagonal_inches <= 16.5 or  
                screen_width < 1366 or screen_height < 768 or  
                dpi > 110  
            )
            
            return is_portable, diagonal_inches, dpi
            
        except Exception:
            # Fallback si la d√©tection DPI √©choue
            return screen_width < 1366 or screen_height < 768, None, None
'''
    
    # Modifications pour setup_style()
    setup_style_fix = '''
        # Utiliser la d√©tection centralis√©e
        is_small_screen, diagonal_inches, dpi = self.is_portable_screen()
        screen_width = self.master.winfo_screenwidth()
        screen_height = self.master.winfo_screenheight()
'''
    
    # Modifications pour optimize_window_for_screen()
    optimize_window_fix = '''
        # Utiliser la m√©thode centralis√©e de d√©tection
        is_small_screen, diagonal_inches, dpi = self.is_portable_screen()
        
        if is_small_screen:
            # Pour les petits √©crans (laptops), utiliser 95% de l'√©cran
            window_width = int(screen_width * 0.95)
            window_height = int(screen_height * 0.90)
            x = (screen_width - window_width) // 2
            y = (screen_height - window_height) // 2
            
            self.master.geometry(f"{window_width}x{window_height}+{x}+{y}")
            if diagonal_inches:
                print(f"üì± Fen√™tre optimis√©e: {window_width}x{window_height} pour √©cran portable {diagonal_inches:.1f}‚Ä≥ (DPI:{dpi:.0f})")
            else:
                print(f"üì± Fen√™tre optimis√©e: {window_width}x{window_height} pour √©cran portable")
        else:
            # Pour les grands √©crans, maximiser
            try:
                self.master.state('zoomed')  # Windows
            except tk.TclError:
                try:
                    self.master.attributes('-zoomed', True)  # Linux/Unix
                except tk.TclError:
                    # Fallback pour la compatibilit√©
                    self.master.geometry("1200x800")
            print(f"üñ•Ô∏è Fen√™tre maximis√©e pour grand √©cran")
'''
    
    # Modifications pour setup_graphs()
    setup_graphs_fix = '''
        # Utiliser la d√©tection centralis√©e pour coh√©rence
        is_small_screen, diagonal_inches, dpi = self.is_portable_screen()
'''
    
    print("üìã PATCH DE CORRECTION - D√âTECTION √âCRAN PORTABLE")
    print("=" * 60)
    print()
    print("üéØ OBJECTIF:")
    print("   Corriger la d√©tection d'√©cran portable pour r√©soudre")
    print("   le probl√®me d'interface coup√©e sur √©cran 15\" en 1920x1080")
    print()
    print("üîß CORRECTIONS √Ä APPLIQUER:")
    print("   1. Ajouter la m√©thode is_portable_screen()")
    print("   2. Modifier setup_style() pour utiliser la d√©tection centralis√©e")
    print("   3. Modifier optimize_window_for_screen() pour la nouvelle logique")
    print("   4. Modifier setup_graphs() pour la coh√©rence")
    print()
    print("üì± CRIT√àRES DE D√âTECTION:")
    print("   ‚Ä¢ Taille physique ‚â§ 16.5 pouces (laptops)")
    print("   ‚Ä¢ DPI > 110 (√©crans haute densit√©)")
    print("   ‚Ä¢ R√©solution < 1366x768 (crit√®re original)")
    print()
    print("‚úÖ R√âSULTAT ATTENDU:")
    print("   √âcran 15\" en 1920x1080 ‚Üí D√©tect√© comme portable")
    print("   √âcran 24\" en 1920x1080 ‚Üí D√©tect√© comme grand √©cran")
    print()
    print("üìÅ FICHIERS AFFECT√âS:")
    print("   ‚Ä¢ runner.py (corrections appliqu√©es)")
    print("   ‚Ä¢ SCREEN_DETECTION_REPORT.md (documentation)")
    print("   ‚Ä¢ quick_screen_test.py (test de validation)")
    
    return {
        'method': is_portable_screen_method,
        'setup_style': setup_style_fix,
        'optimize_window': optimize_window_fix,
        'setup_graphs': setup_graphs_fix
    }

def main():
    print("üöÄ Application du patch de d√©tection d'√©cran portable")
    print()
    
    fixes = apply_screen_detection_fix()
    
    print()
    print("üìã INSTRUCTIONS D'APPLICATION:")
    print("   1. Les corrections ont √©t√© document√©es")
    print("   2. Testez avec quick_screen_test.py")
    print("   3. Lancez l'application sur votre laptop 15\"")
    print("   4. V√©rifiez que l'interface responsive s'active")
    print()
    print("üîç VALIDATION:")
    print("   ‚Ä¢ Recherchez le message: 'üì± Interface adapt√©e pour √©cran portable'")
    print("   ‚Ä¢ V√©rifiez que les boutons de navigation ne sont plus coup√©s")
    print("   ‚Ä¢ Confirmez que la fen√™tre utilise 95% de l'√©cran")
    print()
    print("‚úÖ Patch pr√™t √† tester!")

if __name__ == "__main__":
    main()
