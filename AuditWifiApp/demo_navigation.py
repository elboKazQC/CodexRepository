#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration interactive des fonctionnalit√©s de navigation temporelle
et du mode plein √©cran pour les pr√©sentations client
"""

import sys
import os
import time
import threading
from datetime import datetime, timedelta
from wifi.wifi_collector import WifiSample

# Ajouter le r√©pertoire racine au path pour l'import
sys.path.insert(0, os.path.dirname(__file__))

def create_demo_samples():
    """Cr√©e des √©chantillons de d√©monstration avec des √©v√©nements r√©alistes"""
    samples = []
    base_time = datetime.now() - timedelta(minutes=30)

    # Simulation d'√©v√©nements r√©seau r√©alistes sur 30 minutes
    for i in range(300):  # 300 √©chantillons = 1 toutes les 6 secondes
        current_time = base_time + timedelta(seconds=i * 6)

        # Simulation d'√©v√©nements sp√©cifiques
        if i < 50:  # D√©but - connexion stable
            signal = -45 + (i % 5)
            quality = 85 + (i % 10)
            status = "Connected"
        elif 50 <= i < 80:  # Probl√®me de signal (minutes 5-8)
            signal = -75 + (i % 15)  # Signal faible et instable
            quality = 40 + (i % 20)
            status = "Poor Signal"
        elif 80 <= i < 120:  # R√©cup√©ration progressive
            signal = -65 + min(20, (i-80))  # Am√©lioration graduelle
            quality = 50 + min(35, (i-80))
            status = "Recovering"
        elif 120 <= i < 200:  # P√©riode stable
            signal = -50 + (i % 5)
            quality = 80 + (i % 15)
            status = "Connected"
        elif 200 <= i < 250:  # Changement de point d'acc√®s
            signal = -60 + (i % 10)
            quality = 60 + (i % 25)
            status = "Roaming" if i % 3 == 0 else "Connected"
        else:  # Fin - connexion optimale
            signal = -40 + (i % 3)
            quality = 90 + (i % 8)
            status = "Excellent"

        # Choix du r√©seau selon la p√©riode
        if i < 100:
            ssid = "Corporate_WiFi_Main"
            bssid = "00:1A:2B:3C:4D:5E"
        elif i < 200:
            ssid = "Corporate_WiFi_Backup"
            bssid = "00:1A:2B:3C:4D:5F"
        else:
            ssid = "Corporate_WiFi_5G"
            bssid = "00:1A:2B:3C:4D:60"

        sample = WifiSample(
            timestamp=current_time.strftime('%Y-%m-%d %H:%M:%S.%f'),
            ssid=ssid,
            bssid=bssid,
            signal_strength=signal,
            quality=max(0, min(100, quality)),
            channel=6 if "Main" in ssid else (11 if "Backup" in ssid else 36),
            band="2.4 GHz" if "5G" not in ssid else "5 GHz",
            status=status,
            transmit_rate=f'{max(10, 150 - abs(signal))} Mbps',
            receive_rate=f'{max(5, 75 - abs(signal)//2)} Mbps',
            raw_data={
                'TransmitRate': f'{max(10, 150 - abs(signal))} Mbps',
                'ReceiveRate': f'{max(5, 75 - abs(signal)//2)} Mbps',
                'Channel': 6 if "Main" in ssid else (11 if "Backup" in ssid else 36),
                'Band': "2.4 GHz" if "5G" not in ssid else "5 GHz",
                'EventType': 'Normal' if status == 'Connected' else 'Alert'
            }
        )
        samples.append(sample)

    return samples

def inject_samples_into_runner(samples):
    """Injecte les √©chantillons dans l'application runner"""
    try:
        import runner

        # Cr√©er l'application si elle n'existe pas
        if not hasattr(runner, 'app') or runner.app is None:
            print("üöÄ Initialisation de l'application...")
            runner.app = runner.WifiAnalysisApp()

        # Injecter les √©chantillons
        print(f"üìä Injection de {len(samples)} √©chantillons de d√©monstration...")
        for sample in samples:
            runner.app.wifi_samples.append(sample)

        # Mettre √† jour l'affichage
        runner.app.update_display()
        print("‚úÖ √âchantillons inject√©s avec succ√®s!")

        return runner.app

    except Exception as e:
        print(f"‚ùå Erreur lors de l'injection: {e}")
        return None

def start_demo():
    """D√©marre la d√©monstration interactive"""
    print("üéØ D√âMONSTRATION NAVIGATION TEMPORELLE WIFI")
    print("=" * 60)

    # Cr√©er les √©chantillons de d√©monstration
    print("üìà Cr√©ation du sc√©nario de d√©monstration...")
    samples = create_demo_samples()

    print(f"‚úÖ {len(samples)} √©chantillons cr√©√©s")
    print("üìÖ P√©riode: 30 minutes d'historique")
    print("üé≠ Sc√©narios inclus:")
    print("   ‚Ä¢ üü¢ Connexion stable (0-5 min)")
    print("   ‚Ä¢ üî¥ Probl√®mes de signal (5-8 min)")
    print("   ‚Ä¢ üü° R√©cup√©ration progressive (8-12 min)")
    print("   ‚Ä¢ üü¢ P√©riode stable (12-20 min)")
    print("   ‚Ä¢ üîÑ Changement de point d'acc√®s (20-25 min)")
    print("   ‚Ä¢ üü¢ Connexion optimale (25-30 min)")

    print("\nüöÄ Lancement de l'application avec donn√©es de d√©mo...")

    # Injecter dans l'application
    app = inject_samples_into_runner(samples)

    if app:
        print("\n" + "=" * 60)
        print("üéõÔ∏è FONCTIONNALIT√âS DE NAVIGATION DISPONIBLES:")
        print("=" * 60)
        print("\n1. üìä NAVIGATION TEMPORELLE:")
        print("   ‚Ä¢ D√©cochez 'Temps r√©el' pour activer la navigation")
        print("   ‚Ä¢ Utilisez ‚èÆÔ∏è ‚è™ ‚è© ‚è≠Ô∏è pour naviguer")
        print("   ‚Ä¢ Slider de position pour aller √† un moment pr√©cis")
        print("   ‚Ä¢ Fen√™tres d'affichage: 50, 100, 200, 500, 1000, Tout")

        print("\n2. üñ•Ô∏è MODE PLEIN √âCRAN:")
        print("   ‚Ä¢ Bouton 'Plein √âcran' pour pr√©sentation client")
        print("   ‚Ä¢ Graphiques agrandis avec contr√¥les")
        print("   ‚Ä¢ Parfait pour d√©monstrations professionnelles")

        print("\n3. üéØ SC√âNARIOS √Ä D√âMONTRER:")
        print("   ‚Ä¢ Minutes 5-8: Naviguez vers les probl√®mes de signal")
        print("   ‚Ä¢ Minutes 20-25: Montrez le changement de point d'acc√®s")
        print("   ‚Ä¢ Comparez d√©but vs fin pour montrer l'am√©lioration")

        print("\n‚ú® POUR PR√âSENTATION CLIENT:")
        print("   ‚Ä¢ Mode plein √©cran pour visibilit√© maximale")
        print("   ‚Ä¢ Navigation pr√©cise vers √©v√©nements sp√©cifiques")
        print("   ‚Ä¢ Exportation de captures avec toolbar matplotlib")
        print("   ‚Ä¢ Analyse professionnelle de la qualit√© r√©seau")

        print("\nüé¨ D√©monstration pr√™te! L'application continue de fonctionner...")
        return True
    else:
        print("‚ùå √âchec du lancement de la d√©monstration")
        return False

if __name__ == "__main__":
    # Test des √©chantillons
    print("üîß Test de cr√©ation des √©chantillons...")
    test_samples = create_demo_samples()
    print(f"‚úÖ {len(test_samples)} √©chantillons de test cr√©√©s")

    # V√©rification de quelques √©chantillons
    print("\nüìã Aper√ßu des √©chantillons:")
    for i, sample in enumerate(test_samples[::50]):  # √âchantillons tous les 50
        print(f"   {i*50:3d}: {sample.ssid} | {sample.signal_strength}dBm | {sample.quality}% | {sample.status}")

    print("\nüöÄ Pour lancer la d√©monstration compl√®te:")
    print("   1. Lancez: python runner.py")
    print("   2. Dans un autre terminal: python demo_navigation.py")
    print("   3. Ou importez ce module dans runner.py")
