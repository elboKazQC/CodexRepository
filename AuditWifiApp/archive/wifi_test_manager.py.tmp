#!/usr/bin/env python
# -*- coding: utf-8 -*-

import threading
import time
import json
from tkinter import messagebox

class WifiTestManager:
    """
    Gère les tests Wi-Fi, y compris le démarrage, l'arrêt et la collecte des résultats.
    """

    def __init__(self, data_collector):
        """Initialise le gestionnaire de test Wi-Fi"""
        self.data_collector = data_collector
        self.test_running = False
        self.collected_data = []
        self.test_thread = None
        self.wifi_test_running = False
        self.current_zone = "Non spécifiée"

    def start_test(self):
        """Démarre un nouveau test WiFi"""
        if not self.test_running:
            self.test_running = True
            self.collected_data = []
            self.test_thread = threading.Thread(target=self._run_test)
            self.test_thread.daemon = True
            self.test_thread.start()

    def _run_test(self):
        """Exécute le test WiFi en collectant des données"""
        while self.test_running:
            try:
                # Collecter un échantillon de données
                sample = self.data_collector.collect_sample()
                if sample:
                    self.collected_data.append(sample)
                # Pause courte entre les échantillons
                time.sleep(1)
            except Exception as e:
                print(f"Erreur lors de la collecte: {e}")
                self.test_running = False
                break

    def stop_test(self):
        """Arrête le test WiFi en cours"""
        self.test_running = False
        if self.test_thread and self.test_thread.is_alive():
            self.test_thread.join(timeout=1.0)

    def is_test_running(self):
        """Vérifie si un test est en cours"""
        return self.test_running

    def save_data(self, data, file_path):
        """Sauvegarde les données du test dans un fichier"""
        with open(file_path, 'w') as f:
            json.dump(data, f, indent=2)

    def load_data(self, file_path):
        """Charge les données d'un test depuis un fichier"""
        with open(file_path, 'r') as f:
            return json.load(f)

    def set_zone(self, zone):
        """Met à jour la zone de test actuelle."""
        self.current_zone = zone
        self.data_collector.set_zone(zone)

    def start_wifi_test(self, update_ui_callback):
        """Démarre le test Wi-Fi dans un thread séparé."""
        if self.wifi_test_running:
            messagebox.showerror("Erreur", "Un test Wi-Fi est déjà en cours.")
            return

        self.wifi_test_running = True
        thread = threading.Thread(target=self._run_wifi_test, args=(update_ui_callback,))
        thread.start()

    def stop_wifi_test(self):
        """Arrête le test Wi-Fi."""
        if not self.wifi_test_running:
            messagebox.showinfo("Info", "Aucun test Wi-Fi en cours.")
            return

        self.wifi_test_running = False
        messagebox.showinfo("Succès", "Le test Wi-Fi a été arrêté.")

    def _run_wifi_test(self, update_ui_callback):
        """Exécute le test Wi-Fi et met à jour les résultats."""
        try:
            while self.wifi_test_running:
                # Simuler la collecte de données Wi-Fi
                result = self.data_collector.collect_sample()
                update_ui_callback(result)
                time.sleep(1)  # Pause entre les collectes
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du test Wi-Fi : {str(e)}")
        finally:
            self.wifi_test_running = False
