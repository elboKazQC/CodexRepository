#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de d√©bogage pour identifier les probl√®mes de d√©marrage
"""

import sys
import traceback

def test_imports():
    """Teste tous les imports un par un"""
    print("=== Test des imports ===")

    try:
        print("‚úì sys import√©")
        import json
        print("‚úì json import√©")
        import logging
        print("‚úì logging import√©")
        from datetime import datetime
        print("‚úì datetime import√©")
        import tkinter as tk
        print("‚úì tkinter import√©")
        from tkinter import ttk, messagebox, filedialog, simpledialog
        print("‚úì tkinter.ttk import√©")

        import matplotlib
        print("‚úì matplotlib import√©")
        matplotlib.use('TkAgg')
        print("‚úì matplotlib backend configur√©")

        import matplotlib.pyplot as plt
        print("‚úì matplotlib.pyplot import√©")
        plt.ioff()
        print("‚úì matplotlib en mode non-interactif")

        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
        print("‚úì FigureCanvasTkAgg import√©")
        from matplotlib.backends._backend_tk import NavigationToolbar2Tk
        print("‚úì NavigationToolbar2Tk import√©")
        from matplotlib.figure import Figure
        print("‚úì Figure import√©")
        from matplotlib.widgets import SpanSelector
        print("‚úì SpanSelector import√©")
        import matplotlib.dates as mdates
        print("‚úì mdates import√©")
        import numpy as np
        print("‚úì numpy import√©")

        from typing import List, Optional, Dict
        print("‚úì typing import√©")
        import os
        print("‚úì os import√©")
        import subprocess
        print("‚úì subprocess import√©")
        import re
        print("‚úì re import√©")

        from dotenv import load_dotenv
        print("‚úì dotenv import√©")
        load_dotenv()
        print("‚úì variables d'environnement charg√©es")

        # Maintenant tester les imports locaux
        try:
            from network_analyzer import NetworkAnalyzer
            print("‚úì NetworkAnalyzer import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import NetworkAnalyzer: {e}")

        try:
            from amr_monitor import AMRMonitor
            print("‚úì AMRMonitor import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import AMRMonitor: {e}")

        try:
            from wifi.wifi_collector import WifiSample
            print("‚úì WifiSample import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import WifiSample: {e}")

        try:
            from src.ai.simple_moxa_analyzer import analyze_moxa_logs
            print("‚úì analyze_moxa_logs import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import analyze_moxa_logs: {e}")

        try:
            from config_manager import ConfigurationManager
            print("‚úì ConfigurationManager import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import ConfigurationManager: {e}")

        try:
            from mac_tag_manager import MacTagManager
            print("‚úì MacTagManager import√©")
        except ImportError as e:
            print(f"‚ùå Erreur import MacTagManager: {e}")

        print("\n=== Tous les imports de base r√©ussis ! ===")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors des imports: {e}")
        traceback.print_exc()
        return False

def test_main_class():
    """Teste l'instanciation de la classe principale"""
    print("\n=== Test de la classe principale ===")

    try:
        import tkinter as tk
        from runner import NetworkAnalyzerUI

        print("‚úì Cr√©ation de la fen√™tre Tk...")
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre pour les tests

        print("‚úì Instanciation de NetworkAnalyzerUI...")
        app = NetworkAnalyzerUI(root)

        print("‚úì Classe principale cr√©√©e avec succ√®s!")
        root.destroy()
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de l'instanciation: {e}")
        traceback.print_exc()
        return False

def main():
    """Fonction principale de d√©bogage"""
    print("üîç Diagnostic de d√©marrage de l'application WiFi Analyzer")
    print("=" * 60)

    # Test des imports
    imports_ok = test_imports()

    if imports_ok:
        # Test de la classe principale
        main_class_ok = test_main_class()

        if main_class_ok:
            print("\n‚úÖ Tous les tests r√©ussis ! L'application devrait d√©marrer.")

            # Essayer de d√©marrer normalement
            print("\nüöÄ Tentative de d√©marrage normal...")
            try:
                import tkinter as tk
                from runner import NetworkAnalyzerUI

                root = tk.Tk()
                app = NetworkAnalyzerUI(root)
                print("‚úÖ Application d√©marr√©e avec succ√®s!")

                # Demander si on veut continuer avec l'interface
                response = input("\nVoulez-vous ouvrir l'interface graphique ? (o/n): ")
                if response.lower() in ['o', 'oui', 'y', 'yes']:
                    root.mainloop()
                else:
                    root.destroy()

            except Exception as e:
                print(f"‚ùå Erreur lors du d√©marrage normal: {e}")
                traceback.print_exc()
        else:
            print("\n‚ùå Probl√®me avec la classe principale")
    else:
        print("\n‚ùå Probl√®me avec les imports")

    print("\nüîç Diagnostic termin√©.")

if __name__ == "__main__":
    main()
